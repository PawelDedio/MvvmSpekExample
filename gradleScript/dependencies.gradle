ext {
    //VERSIONS
    compatVersion = '1.0.2'
    daggerVersion = '2.24'
    compatDesignVersion = '1.0.0'
    lifecycleVersion = "2.2.0-alpha01"
    coroutinesVersion = "1.3.1"
    okHttpVersion = '3.14.2'
    retrofitVersion = '2.6.0'
    gsonVersion = '2.8.5'
    spekVersion = '2.0.7'
    roomVersion = '2.2.0-rc01'

    //LIBRARIES
    okHttp = "com.squareup.okhttp3:okhttp:$okHttpVersion"
    okHttpLogger = "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"
    retrofitConverter = "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    retrofit = "com.squareup.retrofit2:retrofit:$retrofitVersion"
    gson = "com.google.code.gson:gson:$gsonVersion"
    mockito = "com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0"

    kotlin = [
            core   : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion",
            reflect: "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion",
    ]

    dagger = [
            kapt          : "com.google.dagger:dagger-compiler:$daggerVersion",
            implementation: "com.google.dagger:dagger:$daggerVersion"
    ]

    coroutines = [
            core   : "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion",
            android: "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion",
            test   : "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"
    ]

    spek = [
            dsl   : "org.spekframework.spek2:spek-dsl-jvm:$spekVersion",
            runner: "org.spekframework.spek2:spek-runner-junit5:$spekVersion"
    ]

    junit = [
            junit : "junit:junit:4.12",
            engine: "org.junit.platform:junit-platform-engine:1.0.1"
    ]

    room = [
            runtime : "androidx.room:room-runtime:$roomVersion",
            compiler: "androidx.room:room-compiler:$roomVersion",
            ktx     : "androidx.room:room-ktx:$roomVersion"
    ]

    commonTestLibraries = [
            spek.dsl,
            spek.runner,
            junit.junit,
            junit.engine,
            kotlin.reflect,
            mockito,
            coroutines.test
    ]

    //DEPENDENCIES
    domainDependencies = [
            kotlin.core,
            'javax.inject:javax.inject:1',

            // Coroutines
            coroutines.core,

            gson
    ]

    domainKaptDependencies = [
    ]

    domainTestDependencies = [
            commonTestLibraries
    ]

    dataDependencies = [
            kotlin.core,
            dagger.implementation,

            // Coroutines
            coroutines.core,

            gson
    ]

    dataKaptDependencies = [
            dagger.kapt,
    ]

    dataTestDependencies = [
            commonTestLibraries
    ]

    remoteDependencies = [
            kotlin.core,
            dagger.implementation,
            gson,

            // Coroutines
            coroutines.core,

            // Network
            okHttp,
            okHttpLogger,
            retrofitConverter,
            retrofit
    ]

    remoteKaptDependencies = [
            dagger.kapt,
    ]

    remoteTestDependencies = []

    cacheDependencies = [
            kotlin.core,
            dagger.implementation,
            gson,

            // Coroutines
            coroutines.core,

            room.runtime,
            room.ktx,
    ]

    cacheKaptDependencies = [
            dagger.kapt,
            room.compiler,
    ]

    cacheTestDependencies = [
            commonTestLibraries
    ]

    presentationDependencies = [
            kotlin.core,
            dagger.implementation,

            //Android design
            "androidx.appcompat:appcompat:$compatVersion",
            "androidx.core:core-ktx:$compatVersion",
            "androidx.constraintlayout:constraintlayout:1.1.3",
            "com.google.android.material:material:$compatDesignVersion",

            //Navigation components
            "androidx.navigation:navigation-fragment-ktx:$navVersion",
            "androidx.navigation:navigation-ui-ktx:$navVersion",

            //Lifecycle components
            "androidx.lifecycle:lifecycle-extensions:$lifecycleVersion",
            "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion",
            "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion",

            // Coroutines
            coroutines.core,
            coroutines.android,

            // Retrofit - needed in presentation module for dependency injection
            retrofit,

            // Room = needed in presentation module for db injection
            room.runtime,

            gson,
    ]

    presentationKaptDependencies = [
            dagger.kapt,
    ]

    presentationTestDependencies = [
            commonTestLibraries
    ]
}